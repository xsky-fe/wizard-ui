{"componentChunkName":"component---src-templates-components-post-js","path":"/components/tree/","result":{"data":{"mdx":{"id":"32d5ead7-3f7f-5a40-9916-3646e83c1e51","excerpt":"树型选择控件。 基本用法 默认展示 隐藏复选框 默认节点展开 交互 API","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tree 树级组件\",\n  \"date\": \"2019-06-13T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6811\\u578B\\u9009\\u62E9\\u63A7\\u4EF6\\u3002\"), mdx(\"h2\", null, \"\\u57FA\\u672C\\u7528\\u6CD5\"), mdx(\"h3\", null, \"\\u9ED8\\u8BA4\\u5C55\\u793A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"() => {\\n  const treeData = [\\n    {\\n      key: '0-0',\\n      title: 'parent 1',\\n      children: [\\n        {\\n          key: '0-0-0',\\n          title: 'parent 1-1',\\n          children:[\\n            { key: '0-0-0-0', title: 'parent 1-1-0'}\\n          ],\\n        },\\n        {\\n          key: '0-0-1',\\n          title: 'parent 1-2',\\n          children:[\\n            { key: '0-0-1-0', title: 'parent 1-2-0', disableCheckbox: true },\\n            { key: '0-0-1-1', title: 'parent 1-2-1' },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n  return (\\n    <Tree data={treeData}/>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u9690\\u85CF\\u590D\\u9009\\u6846\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"() => {\\n  const treeData = [\\n    {\\n      key: '0-0',\\n      title: 'parent 1',\\n      children: [\\n        {\\n          key: '0-0-0',\\n          title: 'parent 1-1',\\n          children:[\\n            { key: '0-0-0-0', title: 'parent 1-1-0'}\\n          ],\\n        },\\n        {\\n          key: '0-0-1',\\n          title: 'parent 1-2',\\n          children:[\\n            { key: '0-0-1-0', title: 'parent 1-2-0', disableCheckbox: true },\\n            { key: '0-0-1-1', title: 'parent 1-2-1' },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n  return (\\n   <Tree data={treeData} checkable={false}/>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u9ED8\\u8BA4\\u8282\\u70B9\\u5C55\\u5F00\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"() => {\\n  const treeData = [\\n    {\\n      key: '0-0',\\n      title: 'parent 1',\\n      children: [\\n        {\\n          key: '0-0-0',\\n          title: 'parent 1-1',\\n          children:[\\n            { key: '0-0-0-0', title: 'parent 1-1-0'}\\n          ],\\n        },\\n        {\\n          key: '0-0-1',\\n          title: 'parent 1-2',\\n          children:[\\n            { key: '0-0-1-0', title: 'parent 1-2-0', disableCheckbox: true },\\n            { key: '0-0-1-1', title: 'parent 1-2-1' },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n  return (\\n   <Tree data={treeData} defaultExpandAll/>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u4EA4\\u4E92\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"() => {\\n  const treeData = [\\n    {\\n      key: '0-0',\\n      title: 'parent 1',\\n      children: [\\n        {\\n          key: '0-0-0',\\n          title: 'parent 1-1',\\n          children:[\\n            { key: '0-0-0-0', title: 'parent 1-1-0'}\\n          ],\\n        },\\n        {\\n          key: '0-0-1',\\n          title: 'parent 1-2',\\n          children:[\\n            { key: '0-0-1-0', title: 'parent 1-2-0', disableCheckbox: true },\\n            { key: '0-0-1-1', title: 'parent 1-2-1' },\\n          ],\\n        },\\n      ],\\n    },\\n  ];\\n  const [ state, setState ] = React.useState({\\n    checkedKeys: [],\\n    info: {},\\n  });\\n  const onCheck = (checkedKeys, info) => {\\n    setState({ checkedKeys, info });\\n  };\\n  return (\\n    <div>\\n      <p>\\u9009\\u4E2D\\u8282\\u70B9\\uFF1A{state.checkedKeys.join(', ')}</p>\\n      <p>\\u662F\\u5426\\u9009\\u4E2D\\uFF1A{state.info.checked ? '\\u662F' : '\\u5426'}</p>\\n      <Tree data={treeData} onCheck={onCheck}/>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"API\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/components/tree/"},"headings":[{"value":"基本用法","depth":2},{"value":"默认展示","depth":3},{"value":"隐藏复选框","depth":3},{"value":"默认节点展开","depth":3},{"value":"交互","depth":3},{"value":"API","depth":2}],"frontmatter":{"title":"Tree 树级组件","date":"2019-06-13","author":null}}},"pageContext":{"slug":"/components/tree/","previous":{"fields":{"slug":"/components/switch/"},"frontmatter":{"title":"Switch 开关"}},"next":{"fields":{"slug":"/components/steps/"},"frontmatter":{"title":"Steps 步骤条"}},"propDatas":{"node":{"fields":{"slug":"/Tree/"},"displayName":"Tree","props":[{"name":"data","type":{"name":"array","value":null},"defaultValue":null,"required":true,"description":{"text":"tree 数据"}},{"name":"selectable","type":{"name":"bool","value":null},"defaultValue":{"value":"false"},"required":false,"description":{"text":"title 部分是否单独可选"}},{"name":"checkable","type":{"name":"bool","value":null},"defaultValue":{"value":"true"},"required":false,"description":{"text":"是否展示 checkbox 勾选框"}},{"name":"prefixCls","type":{"name":"string","value":null},"defaultValue":{"value":"'Tree'"},"required":false,"description":{"text":"样式前缀，只读"}},{"name":"showIcon","type":{"name":"bool","value":null},"defaultValue":{"value":"false"},"required":false,"description":{"text":"是否展示收缩图标"}}]}}}}}